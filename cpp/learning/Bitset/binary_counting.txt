This I found to be quite interesting. Mainly because it kind of explains why things like memory
both RAM and GPU and others is not only even, but also returned in multiples of 8. 
8gb ram, 16gb, 32gb, 64gb, 128gb

Decimal     Binary
    0    |  0
    1    |  1  
    2    |  10
    3    |  11
    4    |  100
    5    |  101
    6    |  110
    7    |  111
    8    |  1000
    9    |  1001
    10   |  1010
    11   |  1011
    12   |  1100
    13   |  1101
    14   |  1110
    15   |  1111
    16   |  1000 0001?

Method 1 **preferred:

    There existings a couple of different methods for converiting decimal to binary. 
    The first, is using remainder addition. Ex. Let's look at converting the number 9 to binary

    9/2 -> 4 r 1
    4/2 -> 2 r 0
    2/2 -> 1 r 0
    1/2 -> 0 r 1

    if we put all the remainders together we get 1001. Based on the chart above, 1001 is correct.

Method 2 :
    I find this method requires a little more thinking and takes longer. For this, we look to a larger number
    and will try to use the number 148.

    We need to figure out the largest power of 2 that is smaller than 148. **This means in the
    multiples of memory (128, 64, 32, 16, 8, 4, 2)

    According to the above, the closest would be 128. From there, we tally up the numbers that add up 
    to 148

    1       0       0       1       0       1       0       0      
    128     64      32      16      8       4       2       1      

    Now we simply add them together and we get the binary value 
    148 = 1001 0100


How about converting a binary value to a decimal? We can do that using method 2 as well.
Note: Start at 128 because 256 is duodecimal? I think at least

Lets try the number 0100 1101

    0       1       0       0       1       1       0       1      
    128     64      32      16      8       4       2       1    

Adding up all the 1's you get 77!
